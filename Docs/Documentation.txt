Step 1: Define the Data Model for Intent
    I basically need a well-defined, validated structure for what the LLM will return.
    This ensures that the rest of our application can reliably work with the LLM's output.
    I'll use Pydantic for this, which enforces data types and validation. 

    Used classes as I'm making sure that I follow SOLID principles.

Step 2: Define the Abstract LLM interface
    I'll define the contract for any LLM parser we might use. This abstraction allows us to
    easily swap out OpenRouter for another service (maybe OpenAI or local LLM(If I care enought to develop one!))
    in the future without changing the rest of the application.
    (Again I looked forward to adhere to the SOLID). 

Step 3: Implement the OpenRouter LLM parser
    Now, I'll create the concrete implementation that uses OpenRouter's API to parse the command.
    This class will inherit from LLMInterface and implement the `parse_command` method.

    I'll use the requests library for the API call and python-dotenv to manage the API key securely.

====================================================================================================================

uvicorn api.main:app --reload

cd frontend
npm start

====================================================================================================================

"Failed to fetch" error is a classic CORS (Cross-Origin Resource Sharing) issue.
    Context: upon uploading the .csv, 'Failed to fetch' appears.